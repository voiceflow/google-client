version: 2.1

orbs:
  codecov: codecov/codecov@1.0.2

executors:
  test-executor:
    docker:
      - image: circleci/node:12
      - image: circleci/dynamodb:13-oracle # DynamoDB service container
    resource_class: large
  build-executor:
    working_directory: /tmp/vf-build
    docker:
      - image: voiceflow/ci-image:v3
    resource_class: medium
  default-executor: # used to run the release
    docker:
      - image: circleci/node:12
    resource_class: small

commands:
  install_aws_cli:
    steps:
      - run:
          name: Install pip3
          command: sudo apt update && sudo apt install -y python3-pip
      - run:
          name: Install AWS CLI
          command: pip3 install awscli

  clone_s3_assets:
    steps:
      - run:
          name: Clone s3 assets
          command: |
            aws s3 sync s3://com.voiceflow.ci.assets/google ~/project/tests/smokeTest/recordedSessions

  setup_test_env:
    steps:
      - run:
          name: AWS Config
          command: ./scripts/mock_aws_credentials.sh
      - run:
          name: Wait for Dynamo Docker Image
          command: dockerize -wait tcp://localhost:8000 -timeout 1m

  install_node_modules:
    steps:
      - restore_cache:
          keys:
            - node-module-cache-{{ checksum "yarn.lock" }}
      - run:
          name: yarn install packages
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            yarn install --frozen-lockfile
      - save_cache: # special step to save the dependency cache
          key: node-module-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules

jobs:
  test:
    executor: test-executor
    steps:
      - checkout
      - install_node_modules
      - setup_test_env
      - run:
          name: "Build package"
          command: |
            yarn build
      - run:
          name: "Run tests"
          command: |
            yarn test
      - codecov/upload:
          file: nyc_coverage/lcov.info
      # temp steps
      - install_aws_cli
      - clone_s3_assets
      - run:
          name: Run smoke tests
          command: yarn test:smoke

  build-push-image:
    executor: build-executor
    environment:
      IMAGE_TAG: "k8s-$CIRCLE_SHA1"
      IMAGE_REPO: "168387678261.dkr.ecr.us-east-1.amazonaws.com/google"
      IMAGE_NAME: "$IMAGE_REPO:$IMAGE_TAG"
    steps:
      - checkout # special step to check out source code to working directory
      - setup_remote_docker
      - run:
          name: "Build docker image"
          command: |
            # Fix semantic versioning 
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              npm config set unsafe-perm true # needed for npx to work
              set +e  # Don't exit on the any error (for semantic-release)
              npx semantic-release@15 --prepare --dry-run | tee sem_release.output  # print semver to screen and force return 0
              SEM_VER=$(cat sem_release.output | grep 'Published release ' | awk '{print $NF}')  # Get release semver
              set -e  # Don't exit on the any error (for semantic-release)
              if [ -z "$SEM_VER" ]; then
                echo -e "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
                SEM_VER=$(npm view @voiceflow/google version)
              fi
            else
              SEM_VER=$CIRCLE_BRANCH-$CIRCLE_SHA1
            fi
            echo -e "Building with SEM_VER=$SEM_VER"
            $(aws ecr get-login --no-include-email --region us-east-1)
            docker build \
              --build-arg NPM_TOKEN=//registry.npmjs.org/:_authToken=${NPM_TOKEN} \
              --build-arg build_BUILD_NUM=${CIRCLE_BUILD_NUM} \
              --build-arg build_BUILD_URL=${CIRCLE_BUILD_URL}	\
              --build-arg build_GIT_SHA=${CIRCLE_SHA1} \
              --build-arg build_SEM_VER=${SEM_VER} \
              -t $IMAGE_NAME .
      - run:
          name: "Push docker images"
          command: |
            docker push $IMAGE_NAME
            docker tag $IMAGE_NAME $IMAGE_REPO:latest-$CIRCLE_BRANCH
            docker push $IMAGE_REPO:latest-$CIRCLE_BRANCH

  deploy-image:
    executor: build-executor
    environment:
      IMAGE_TAG: "k8s-$CIRCLE_SHA1"
      IMAGE_REPO: "168387678261.dkr.ecr.us-east-1.amazonaws.com/google"
      IMAGE_NAME: "$IMAGE_REPO:$IMAGE_TAG"
    steps:
      - run:
          name: Update kubernetes image
          command: |
            aws eks --region us-east-1 update-kubeconfig --name development
            kubectl set image --namespace voiceflow-v1 deployment/google-$CIRCLE_BRANCH app=$IMAGE_NAME
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              aws eks --region us-east-1 update-kubeconfig --name production
              kubectl set image --namespace voiceflow-v1 deployment/google-production app=$IMAGE_NAME
            fi

  build-deploy-dev-env:
    executor: build-executor
    environment:
      IMAGE_TAG: "k8s-$CIRCLE_SHA1"
      IMAGE_REPO: "168387678261.dkr.ecr.us-east-1.amazonaws.com/google"
      IMAGE_NAME: "$IMAGE_REPO:$IMAGE_TAG"
      ENV_NAME: "$CIRCLE_BRANCH"
      SEM_VER: "$CIRCLE_BRANCH-$CIRCLE_SHA1"
    steps:
      - checkout # special step to check out source code to working directory
      - setup_remote_docker # Need this to run DinD
      - add_ssh_keys: # To enable write access to repository for removing development environment branches
          fingerprints:
            - "0d:70:64:7b:cf:1e:f2:63:ed:a0:98:3d:a9:e2:35:b9"
      - run:
          name: "Build dev environment image"
          command: |
            set +e
            DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $IMAGE_NAME > /dev/null 2>&1
            SEARCH_IMAGE_RESULT=$?
            set -e
            if [[ $SEARCH_IMAGE_RESULT -ne 0 ]]; then   # Only build the image if there are no existing images 
              $(aws ecr get-login --no-include-email --region us-east-1)
              docker build \
                --build-arg NPM_TOKEN=//registry.npmjs.org/:_authToken=${NPM_TOKEN} \
                --build-arg build_BUILD_NUM=${CIRCLE_BUILD_NUM} \
                --build-arg build_BUILD_URL=${CIRCLE_BUILD_URL}	\
                --build-arg build_GIT_SHA=${CIRCLE_SHA1} \
                --build-arg build_SEM_VER=${SEM_VER} \
                -t $IMAGE_NAME . 
              docker push $IMAGE_NAME
            fi
            git push origin --delete $CIRCLE_BRANCH --no-verify # Clean up git branch
      - run:
          name: "Deploy dev environment image"
          command: |
            aws eks --region us-east-1 update-kubeconfig --name development
            kubectl set image --namespace $ENV_NAME deployment/google app=$IMAGE_NAME

  release:
    executor: default-executor
    steps:
      - checkout
      - run: npx semantic-release@15

# When should each job run and what are their dependencies?
workflows:
  build-deploy-staging:
    jobs:
      - build-push-image:
          context: dev-test
          filters:
            branches:
              only:
                - staging
      - deploy-image:
          context: dev-test
          requires:
            - build-push-image
          filters:
            branches:
              only:
                - staging

  # Development environments
  build-deploy-environment:
    jobs:
      - build-deploy-dev-env:
          context: dev-test
          filters:
            branches:
              only:
                - /env-.*/

  build-deploy-app:
    jobs:
      - test:
          context: dev-test
          filters:
            branches:
              ignore:
                - /env-.*/
                - staging
      - build-push-image:
          context: dev-test
          filters:
            branches:
              only:
                - master
      - deploy-image:
          context: dev-test
          requires:
            - test
            - build-push-image
          filters:
            branches:
              only:
                - master
      - release:
          context: dev-test
          requires:
            - test
          filters:
            branches:
              only: master
